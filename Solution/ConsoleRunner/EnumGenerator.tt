<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension="Generated.cs" #>
// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

using System;

namespace <#= this.Namespace #>
{
	public sealed partial class <#= this.ClassName #>
	{
<# 
var fileContents = ParseFile();
foreach( var entry in fileContents.GetEntryNames() )
{ #>
		public static readonly <#= this.ClassName #> <#= entry #> = new <#= this.ClassName #>(
		);
<# } #>

		private <#= this.ClassName #>()
		{
		}
	}
}
<#+
string Namespace = "Namespace";
string ClassName = "MyClass";
string CsvFileName = "CsvFile.csv";

private sealed class Entry : IEnumerable<FieldType>
{
	public readonly string Name;
	private readonly IEnumerable<FieldType> _fields;

	public Entry( string name, IEnumerable<FieldType> fields )
    {
		Name = name;
		_fields = fields;
    }

	public IEnumerator<FieldType> GetEnumerator()
	{
		return _fields.GetEnumerator();
	}

	System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}
}

public sealed class FieldType
{
	public readonly string Name;
	public readonly Type Type;

	public FieldType( string name, Type type )
    {
		Name = name;
		Type = type;
    }
}

private enum Stage
{
	Names,
	Types,
	Rows,
}

private IEnumerable<Entry> ParseFile()
{
	var currentStage = Stage.Names;

	int cols = 0;
	IEnumerable<string> names = null;
	IEnumerable<Type> types = null;
	List<IEnumerable<string>> rows = new List<IEnumerable<string>>();

	foreach( var line in File.ReadLines( this.Host.ResolvePath(CsvFileName) ) )
    {
		switch( currentStage )
        {
			case Stage.Names:
				names = ParseRow( line );
				cols = names.Count();
				currentStage = Stage.Types;
				break;

			case Stage.Types:
				types = ParseRow( line ).Select( _ => Type.GetType( _ ) ).ToArray();
				// TODO: Check width
				currentStage = Stage.Rows;
				break;
				
			case Stage.Rows:
				var newRow = ParseRow( line );
				// TODO: Check width
				rows.Add( newRow );
				break;

			default:
				throw new Exception("Messed up parsing");
		}
    }

	return new CsvFile( names, types, rows );
}

private IEnumerable<string> ParseRow( string line )
{
	// TODO: Handle spaces and stuff
	return line.Split(',').Select( _ => _.Replace( "\"", string.Empty )).ToArray();
}
#>